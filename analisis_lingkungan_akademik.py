# -*- coding: utf-8 -*-
"""analisis_lingkungan_akademik.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12i6b2n2JTpZh0s1wElbqoX-vQnq2dF0P
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error
import matplotlib.pyplot as plt

st.title("Analisis Lingkungan Akademik Mahasiswa")
st.header("1. Persiapan dan Pembersihan Data")
file = "SURVEY PENGARUH VARIABLE EKSTERNAL TERHADAP PRESTASI AKADEMIK MAHASISWA (Responses).xlsx - per 3Nov2024.csv"
df = pd.read_csv(file)
df

df.info()

st.write(df.isna().sum())

# isi NaN untuk kolom angka
numeric_cols = df.select_dtypes(include=['number']).columns
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())

# Untuk kolom string, isi NaN dengan modus
object_cols = df.select_dtypes(include=['object']).columns
for col in object_cols:
    mode_val = df[col].mode().iloc[0]
    df[col].fillna(mode_val, inplace=True)

file2 = "IPK.csv"
df2 = pd.read_csv(file2)
df2

df2.info()

st.write(df2.isna().sum())

#fill NA
numeric_cols2 = df2.select_dtypes(include=['number']).columns
df2[numeric_cols2] = df2[numeric_cols2].fillna(df2[numeric_cols2].mean())

object_cols2 = df2.select_dtypes(include=['object']).columns
for col in object_cols2:
    mode_val2 = df2[col].mode().iloc[0]
    df2[col].fillna(mode_val2, inplace=True)

st.write(df2.isna().sum())

st.header("2. Clustering Lingkungan Belajar Mahasiswa")
# Drop kolom identitas seperti 'Nama'
X_survey = df.drop(columns=['Nama', 'Program Studi'], errors='ignore')

# One-hot encode jika masih ada kategori
X_survey = pd.get_dummies(X_survey)

# Standardisasi
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_survey)

# K-Means Clustering
kmeans = KMeans(n_clusters=3, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# PCA untuk visualisasi
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
df['PCA1'] = X_pca[:, 0]
df['PCA2'] = X_pca[:, 1]

# Plot hasil cluster
fig, ax = plt.subplots(figsize=(8,6))
sns.scatterplot(data=df, x='PCA1', y='PCA2', hue='Cluster', palette='Set2')
plt.title("Cluster Mahasiswa Berdasarkan Lingkungan Belajar")
st.pyplot(fig)


st.header("3. Prediksi IPK Mahasiswa")
# Buang kolom identitas
X_ipk = df2[['rata2_nilai', 'rata2_hadir', 'jumlah_mk_diambil']]
y_ipk = df2['IPK']

# Encode dan standardisasi
X_ipk = pd.get_dummies(X_ipk)
X_train, X_test, y_train, y_test = train_test_split(X_ipk, y_ipk, test_size=0.2, random_state=42)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# Evaluasi
st.write("Random Forest R²:", r2_score(y_test, y_pred_rf))
st.write("Linear Regression R²:", r2_score(y_test, y_pred_lr))

# Feature importance dari Random Forest
importances = pd.Series(rf.feature_importances_, index=X_ipk.columns).sort_values(ascending=False)
st.write("\nTop 10 Faktor Pengaruh IPK:")
st.write(importances.head(10))

import matplotlib.pyplot as plt
st.header("4. Evaluasi dan Perbandingan Model")
st.subheader("4.1. Evaluasi Regresi")
# Evaluate Random Forest
r2_rf = r2_score(y_test, y_pred_rf)
mae_rf = mean_absolute_error(y_test, y_pred_rf)
st.write(f"Random Forest R²: {r2_rf:.4f}")
st.write(f"Random Forest MAE: {mae_rf:.4f}")

st.subheader("4.2. Evaluasi MAE")
# Evaluate Linear Regression
r2_lr = r2_score(y_test, y_pred_lr)
mae_lr = mean_absolute_error(y_test, y_pred_lr)
st.write(f"Linear Regression R²: {r2_lr:.4f}")
st.write(f"Linear Regression MAE: {mae_lr:.4f}")

st.subheader("4.3. Validasi Silang (Cross-Validation)")
# Cross-validation for Linear Regression
cv_scores_lr = cross_val_score(lr, X_ipk, y_ipk, cv=5, scoring='r2')
st.write(f"\nLinear Regression Cross-Validation R² (5-fold): {cv_scores_lr.mean():.4f} (+/- {cv_scores_lr.std():.4f})")

# Cross-validation for Random Forest
cv_scores_rf = cross_val_score(rf, X_ipk, y_ipk, cv=5, scoring='r2')
st.write(f"Random Forest Cross-Validation R² (5-fold): {cv_scores_rf.mean():.4f} (+/- {cv_scores_rf.std():.4f})")


st.subheader("4.4. Visualisasi Prediksi")
# Plotting actual vs predicted for Linear Regression
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_lr, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel("Actual IPK")
plt.ylabel("Predicted IPK (Linear Regression)")
plt.title("Actual vs Predicted IPK (Linear Regression)")
st.pyplot(fig)


# Plotting actual vs predicted for Random Forest
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred_rf, alpha=0.5, color='green')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel("Actual IPK")
plt.ylabel("Predicted IPK (Random Forest)")
plt.title("Actual vs Predicted IPK (Random Forest)")
st.pyplot(fig)


st.subheader("4.5. Hubungan Fitur dengan IPK")
sns.scatterplot(data=df2, x='rata2_nilai', y='IPK')
plt.title("Hubungan Rata-rata Nilai dengan IPK")
plt.xlabel("Rata-rata Nilai")
plt.ylabel("IPK")
st.pyplot(fig)

